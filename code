#include<bits/stdc++.h>
using namespace std;

class Node{
    public :
        int data;
        Node * next;
        Node(int data){
            this->data = data;
            this->next=NULL;
        } 
};

class SingleLL{
        Node *head;
    public:
        SingleLL(){
            head=NULL;
        }
        
        //insert
        void insertAtBegin(int data){
            Node * obj = new Node(data);
    
            if(head==NULL)
                head=obj;
            else{
                obj->next=head;
                head=obj;
            }   
        }
        
        void insertAtEnd(int data){
            if(head==NULL)
                insertAtBegin(data);
            else{
                Node *ptr=head, *obj=new Node(data);
                
                while(ptr->next!=NULL){
                    ptr=ptr->next;
                }
                
                ptr->next=obj;          
            }
        }
        
        void insertAtPosition(int data,int pos){
            if(pos==1)
                insertAtBegin(data);
            else{
                int c=1;
                Node * ptr = head, *obj = new Node(data);
                while(ptr!=NULL && c<pos-1){
                    c++;
                    ptr=ptr->next;
                }
                
                if(ptr==NULL)
                    cout<<"\nPosition out of bound";
                else if(ptr->next==NULL)
                    ptr->next=obj;
                else{
                    obj->next = ptr->next;
                    ptr->next = obj;
                }
            }   
        }
        
        //delete
        void deleteFromBegin(){
            if(head==NULL)
                cout<<"\nList is empty!";
            else{
                head = head->next;
            }   
        }
        
        void deleteFromEnd(){
            if(head==NULL)
                cout<<"\nList is empty!";
            else if(head->next==NULL)
                head=NULL;  
            else{
                Node *ptr=head;
                
                while(ptr->next->next!=NULL){
                    ptr=ptr->next;
                }

                ptr->next=NULL;         
            }
        }
        
        void deleteFromPosition(int pos){
            if(pos==1)
                head=head->next;
            else{
                int c=1;
                Node * ptr = head;
                while(ptr!=NULL && c<pos-1){
                    c++;
                    ptr=ptr->next;
                }
                
                if(ptr==NULL)
                    cout<<"\nPosition out of bound";
                else{
                    ptr->next = ptr->next->next;
                }
            }   
        }
        
        //search
        void searchByValue(int val){
            Node *ptr = head;
            int pos=1;
            while(ptr!=NULL){
                if(ptr->data==val){
                    cout<<endl<<val<<" is present at position "<<pos<<endl;
                    return;
                }
                pos++;
                ptr=ptr->next;
            }
            cout<<"Element not present";
        }
        
        
        void searchByPosition(int p){
            Node *ptr = head;
            int pos=1;
            while(ptr!=NULL){
                if(pos==p){
                    cout<<endl<<ptr->data<<" is present at position "<<pos<<endl;
                    return;
                }
                pos++;
                ptr=ptr->next;
            }
            cout<<"\nPosition not valid";
        }
        
        //print
        void print(){
            Node *ptr = head;
            
            cout<<"\nLIST : ";
            while(ptr!=NULL){
                cout<<ptr->data<<" ";
                ptr=ptr->next;
            }
            cout<<endl;
        }
};


int main(){
    SingleLL obj;
    char ch;
    int c,p,data,pos,val;
    do{
        cout<<" 1. Insert an element \n 2. Delete an element\n 3. Search an element\n 4. Display";
        cout<<"\nEnter your choice : ";
        cin>>c;
        
        switch(c){
            case 1: cout<<"\n\t1. Insert at begin \n\t2. Insert at End \n\t3. Insert at a position";
                    cout<<"\nEnter your choice :"; cin>>p;
                    cout<<"\nEnter data to be inserted :"; cin>>data;
                    
                    if(p==1)
                        obj.insertAtBegin(data);
                    else if(p==2)
                        obj.insertAtEnd(data);
                    else if(p==3){
                        cout<<"Enter position at which element is to be inserted : "; cin>>pos;
                        obj.insertAtPosition(data,pos);                 
                    }
                    else
                        cout<<"\nWrong choice!";            
                    break;
                    
            case 2: cout<<"\n\t1. Delete from begin \n\t2. Delete from End \n\t3. Delete from a position";
                    cout<<"\nEnter your choice :"; cin>>p;
                    
                    if(p==1)
                        obj.deleteFromBegin();
                    else if(p==2)
                        obj.deleteFromEnd();
                    else if(p==3){
                        cout<<"Enter position from which element is to be deleted : "; cin>>pos;
                        obj.deleteFromPosition(pos);                    
                    }
                    break;
                    
            case 3: cout<<"\n\t1. Search by value \n\t2. Search by Position";
                    cout<<"\nEnter your choice :"; cin>>p;
                    
                    if(p==1){
                        cout<<"\nEnter value to be searched : "; cin>>val;
                        obj.searchByValue(val);
                    }
                    else if(p==2){
                        cout<<"Enter position which is to be searched : "; cin>>pos;                        
                        obj.searchByPosition(pos);
                    }
                    break;
                    
            case 4: obj.print();
                    break;
                            
            default: cout<<"\nWrong Input!!";
                    break;              
        }
        cout<<"\nDo you want to continue ?(y/n)";
        cin>>ch;
    }while(ch=='y' || ch=='Y');

}

//

#include<bits/stdc++.h>
using namespace std;

class Node{
    public :
        int data;
        Node * next,*prev;
        Node(int data){
            this->data = data;
            this->next=NULL;
            this->prev=NULL;
        } 
};

class DoublyLL{
        Node *head;
    public:
        DoublyLL(){
            head=NULL;
        }
        
        //insert
        void insertAtBegin(int data){
            Node * obj = new Node(data);
    
            if(head==NULL)
                head=obj;
            else{
                obj->next=head;
                head->prev=obj;
                head=obj;
            }   
        }
        
        void insertAtEnd(int data){
            if(head==NULL)
                insertAtBegin(data);
            else{
                Node *ptr=head, *obj=new Node(data);
                
                while(ptr->next!=NULL){
                    ptr=ptr->next;
                }
                obj->prev=ptr;
                ptr->next=obj;          
            }
        }
        
        void insertAtPosition(int data,int pos){
            if(pos==1)
                insertAtBegin(data);
            else{
                int c=1;
                Node * ptr = head, *obj = new Node(data);
                while(ptr!=NULL && c<pos-1){
                    c++;
                    ptr=ptr->next;
                }
                
                if(ptr==NULL)
                    cout<<"\nPosition out of bound";
                else if(ptr->next==NULL){
                    ptr->next=obj;
                    obj->prev=ptr;
                }   
                else{
                    obj->prev = ptr;
                    obj->next = ptr->next;
                    ptr->next->prev = obj;
                    ptr->next = obj;
                }
            }   
        }
        
        //delete
        void deleteFromBegin(){
            if(head==NULL)
                cout<<"\nList is empty!";
            else{
                head = head->next;
                head->prev=NULL;
            }   
        }
        
        void deleteFromEnd(){
            if(head==NULL)
                cout<<"\nList is empty!";
            else if(head->next==NULL)
                head=NULL;  
            else{
                Node *ptr=head;
                
                while(ptr->next->next!=NULL){
                    ptr=ptr->next;
                }
                Node * temp = ptr->next;
                ptr->next=NULL;         
                delete temp;
            }
        }
        
        void deleteFromPosition(int pos){
            if(pos==1)
                head=head->next;
            else{
                int c=1;
                Node * ptr = head;
                while(ptr!=NULL && c<pos-1){
                    c++;
                    ptr=ptr->next;
                }
                cout<<endl;
                
                if(ptr==NULL)
                    cout<<"\nPosition out of bound";
                else if(ptr->next->next==NULL){
                    Node *temp = ptr->next;
                    ptr->next=NULL;
                    delete temp;
                }
                        
                else{
                    ptr->next = ptr->next->next;
                    ptr->next->prev = ptr;
                }
            }   
        }
        
        //search
        void searchByValue(int val){
            Node *ptr = head;
            int pos=1;
            while(ptr!=NULL){
                if(ptr->data==val){
                    cout<<endl<<val<<" is present at position "<<pos<<endl;
                    return;
                }
                pos++;
                ptr=ptr->next;
            }
            cout<<"Element not present";
        }
        
        
        void searchByPosition(int p){
            Node *ptr = head;
            int pos=1;
            while(ptr!=NULL){
                if(pos==p){
                    cout<<endl<<ptr->data<<" is present at position "<<pos<<endl;
                    return;
                }
                pos++;
                ptr=ptr->next;
            }
            cout<<"\nPosition not valid";
        }
        
        //print
        void printFwd(){
            Node *ptr = head;
            
            cout<<"\nLIST : ";
            while(ptr!=NULL){
                cout<<ptr->data<<" ";
                ptr=ptr->next;
            }
            cout<<endl;
        }
        
        void printBwd(){
            Node *ptr = head;
            
            while(ptr->next!=NULL){
                ptr=ptr->next;
            }
            
            cout<<"\nLIST : ";
            while(ptr!=NULL){
                cout<<ptr->data<<" ";
                ptr=ptr->prev;
            }
            cout<<endl;
        }
};


int main(){
    DoublyLL obj;
    char ch;
    int c,p,data,pos,val;
    do{
        cout<<" 1. Insert an element \n 2. Delete an element\n 3. Search an element\n 4. Display";
        cout<<"\nEnter your choice : ";
        cin>>c;
        
        switch(c){
            case 1: cout<<"\n\t1. Insert at begin \n\t2. Insert at End \n\t3. Insert at a position";
                    cout<<"\nEnter your choice :"; cin>>p;
                    cout<<"\nEnter data to be inserted :"; cin>>data;
                    
                    if(p==1)
                        obj.insertAtBegin(data);
                    else if(p==2)
                        obj.insertAtEnd(data);
                    else if(p==3){
                        cout<<"Enter position at which element is to be inserted : "; cin>>pos;
                        obj.insertAtPosition(data,pos);                 
                    }
                    else
                        cout<<"\nWrong choice!";            
                    break;
                    
            case 2: cout<<"\n\t1. Delete from begin \n\t2. Delete from End \n\t3. Delete from a position";
                    cout<<"\nEnter your choice :"; cin>>p;
                    
                    if(p==1)
                        obj.deleteFromBegin();
                    else if(p==2)
                        obj.deleteFromEnd();
                    else if(p==3){
                        cout<<"Enter position from which element is to be deleted : "; cin>>pos;
                        obj.deleteFromPosition(pos);                    
                    }
                    break;
                    
            case 3: cout<<"\n\t1. Search by value \n\t2. Search by Position";
                    cout<<"\nEnter your choice :"; cin>>p;
                    
                    if(p==1){
                        cout<<"\nEnter value to be searched : "; cin>>val;
                        obj.searchByValue(val);
                    }
                    else if(p==2){
                        cout<<"Enter position which is to be searched : "; cin>>pos;                        
                        obj.searchByPosition(pos);
                    }
                    break;
                    
            case 4: cout<<"\n\t1. Traverse Forward \n\t2. Traverse Backward";
                    cout<<"\nEnter your choice :"; cin>>p;
                    if(p==1)
                        obj.printFwd();
                    else if(p==2)
                        obj.printBwd(); 
                    break;
                            
            default: cout<<"\nWrong Input!!";
                    break;              
        }
        cout<<"\nDo you want to continue ?(y/n)";
        cin>>ch;
    }while(ch=='y' || ch=='Y');

}